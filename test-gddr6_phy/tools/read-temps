#!/usr/bin/env python

import signal
import numpy
import time

from registers import axi, sg
from gddr6_lib.decode import DecodeCA

assert sg.CONFIG.ENABLE_CONTROL, 'Controller must be enabled first!'


def is_nop(ca):
    return ca.RISING >> 8 == 3 and ca.FALLING >> 8 == 3

def is_refab(ca):
    return \
        ca.RISING >> 8 == 2 and ca.FALLING >> 8 == 1 and \
        (ca.FALLING >> 4) & 1

def get_data():
    sg.COMMAND.START_READ = 1
    data = numpy.empty((64, 4), dtype = numpy.uint32)
    for i in range(64):
        for j in range(4):
            data[i, j] = sg.DQ._value
        sg.COMMAND.STEP_READ = 1
    return data.view(numpy.uint8)

def do_exchange():
    axi.COMMAND.CAPTURE = 1
    sg.COMMAND.START_READ = 1
    result = []
    refab = False
    for i in range(64):
        ca = sg.CA._get_fields()
        result.append(ca)
        if is_refab(ca):
            refab = True
        sg.COMMAND.STEP_READ = 1
    if refab:
        data = get_data()
    else:
        data = None
    return (refab, result, data)

def show_bytes(data):
    return ' '.join('{:02X}'.format(byte) for byte in data)

def decode_ca(ca_list, data):
    decode = DecodeCA()
    for ca, d in zip(ca_list, data):
        decode.decode(ca)
        if (d != 0xFF).any():
            print(decode.tick_count, '', show_bytes(d))

def simple_decode(ca):
    ca0 = ca.RISING
    ca1 = ca.FALLING
    ca0_98 = ca0 >> 8
    ca1_98 = ca1 >> 8
    if ca0_98 == 2 and ca1_98 == 1:
        if (ca1 >> 4) & 1:
            return "REFab"
        else:
            return "REFp2b"
    else:
        return "other"

ctrl_c_seen = False
def handler(sig, frame):
    global ctrl_c_seen
    ctrl_c_seen = True
signal.signal(signal.SIGINT, handler)

def watch():
    while not ctrl_c_seen:
        refab, cal, data = do_exchange()
        if refab:
            decode_ca(cal, data)
            break

def read_temps(delay):
    while not ctrl_c_seen:
        temps = sg.TEMPS._get_fields()
        raw = numpy.array([temps.CH0, temps.CH1, temps.CH2, temps.CH3])
        print(' '.join(map(str, 2 * raw - 40)))
        time.sleep(delay)

read_temps(0.01)
# watch()
