#!/usr/bin/env python

# Read training

import argparse
import time
import numpy

from registers import sg, set_idelay

from gddr6_lib.commands import *
from gddr6_lib.exchange import _Exchange, Stream
from gddr6_lib.display import *

assert sg.STATUS.CK_OK, 'CK is not running and enabled'
assert sg.CONFIG.SG_RESET_N == 3, 'SG RAM in reset'

parser = argparse.ArgumentParser()
parser.add_argument('-L', '--no_load', action = 'store_true')
parser.add_argument('-s', '--sweep', action = 'store_true')
parser.add_argument('-c', '--channel', default = 0, type = int)
parser.add_argument('-C', '--check', action = 'store_true')
parser.add_argument('-v', '--validate', action = 'store_true')
parser.add_argument('-x', '--exchange', action = 'store_true')
args = parser.parse_args()



# For the prototype card we need the sticky CA6 workaround
sg.CONFIG.ENABLE_CABI = 1
sg.CONFIG.FUDGE_STICKY_CA6 = 1

# Want to disable DBI for reception
sg.CONFIG.ENABLE_DBI = 0
# Also want to capture DBI
sg.CONFIG.CAPTURE_DBI = 1

exchange = _Exchange(sg)
stream = Stream(exchange, 4)    # tLTLTR is minimum LDFF interval

test_patterns = [0x00AA, 0x5500, 0x5555, 0x5555, 0x5555, 0x5555]


def load_pattern(pattern):
    for b in range(16):
        bits = 0x3FF if (pattern >> b) & 1 else 0
        stream.command(LDFF(b, bits))

# Loads the given test pattern array
def load_patterns(test_patterns):
    exchange.reset()
    for pattern in test_patterns:
        load_pattern(pattern)
    exchange.exchange()

# Read test pattern
def read_test():
    exchange.reset()
    exchange.command(PREab)
    exchange.delay(4)
    exchange.command(REFab)
    exchange.delay(4)
    for i in range(6):
        exchange.command(RDTR)
        exchange.delay(1)
    exchange.delay(24)
    exchange.exchange()
    data = exchange.run()
    edc_in, edc_out = exchange.read_edc()
    return (data, edc_in, edc_out)


if not args.no_load:
    # First load our test pattern if required
    load_patterns(test_patterns)

data, edc_in, edc_out = read_test()

if args.exchange:
    print_condensed_data_edc(data, edc_in, edc_out, offset = 28)

def print_bits(bytes):
    print(' '.join(f'{byte:08b}' for byte in bytes))

def print_bits(offset, bytes):
    print('%2d' % offset, ' '.join(f'{byte:08b}'[::-1] for byte in bytes))

def show_channel(data, channel):
    for n in range(0, 16):
        ix = n + 16 * channel
        print_bits(ix, data[:, ix])



data_offset = 30
print('Data:')
# for ix in range(0, 16):
#     print_bits(data[29:-3, ix])
show_channel(data[29:-3], args.channel)
print('EDC:')
for ix in range(8):
    print_bits(ix, edc_in[31:-1, ix])
print('DBI:')
for ix in range(8):
    print_bits(ix, edc_out[29:-3, ix])


def show_match(match):
    # Convert array of booleans into a string of 0 or 1
    show = ''.join('1' if m else '0' for m in match)
    # Split the string into four groups of 16 and two of 8 for ease of display
    splits = [0, 16, 32, 48, 64, 72, 80]
    return ' '.join(show[l:r] for l, r in zip(splits[:-1], splits[1:]))


def match_data(data, edc_in, edc_out):
    data = data[data_offset : data_offset + 12]
    edc_in = edc_in[data_offset + 2 : data_offset + 2 + 12]
    edc_out = edc_out[data_offset : data_offset + 12]
    data = numpy.concatenate((data, edc_out, edc_in), axis = 1)
    pattern = numpy.array(test_patterns, dtype = 'uint16').view('uint8')
    return (data == pattern[:, None]).all(0)

print(show_match(match_data(data, edc_in, edc_out)))


# DQ_IDELAY_BASE   = 0b00_000000
# DBI_IDELAY_BASE  = 0b11010_000
# EDC_IDELAY_BASE  = 0b11100_000
# 
# # This array must match the data sequence: DQ, EDC, DBI
# DELAY_ADDRESSES = numpy.concatenate((
#     DQ_IDELAY_BASE + numpy.arange(64),
#     EDC_IDELAY_BASE + numpy.arange(8),
#     DBI_IDELAY_BASE + numpy.arange(8)))

def set_idelays(delays):
    # Ensure a constant behaves like an array
    delays = delays + numpy.zeros(80, dtype = numpy.int64)
    for a, d in zip(range(80), delays):
        set_idelay(a, d)


def sweep_delays(max_delay):
    matches = numpy.zeros((max_delay, 80), dtype = numpy.bool)
    for delay in range(max_delay):
        set_idelays(delay)
        data, edc_in, edc_out = read_test()
        matches[delay] = match_data(data, edc_in, edc_out)
    return matches


# Returns a list of intervals as a list of tuples    (length, mid-point)
def find_intervals(scan):
    # This is kind of tricksy: we convert the array of bools scan into integers,
    # and then use diff() and where() to find the start and end of the window,
    # which is defined by a contiguous block of True.
    diffs = numpy.diff(numpy.int8(numpy.concatenate(([0], scan, [0]))))
    starts = numpy.where(diffs == 1)[0]
    ends = numpy.where(diffs == -1)[0]
    return [
        (end - start, (start + end) // 2)
        for start, end in zip(starts, ends)]

def find_longest_interval(intervals):
    best = intervals[0]
    for interval in intervals[1:]:
        if interval[0] > best[0]:
            best = interval
    return best

def find_eyes(matches):
    best = [
        find_longest_interval(find_intervals(scan))
        for scan in matches.T]
    lengths = numpy.array([l for l, _ in best])
    centres = [c for _, c in best]
    print(list(lengths))
    print(centres)
    return (centres, min(lengths))


if args.sweep:
    matches = sweep_delays(500)
    if matches.any(axis = 0).all():
        delays, min_window = find_eyes(matches)
        print('Minimum window:', min_window)
        set_idelays(delays)
    elif args.sweep:
        print('Not enough data eyes found')
        print(matches)


def check_read_data():
    # Run scan repeatedly until killed or there is an error
    data, edc_in, edc_out = read_test()
    matches = match_data(data, edc_in, edc_out)
    assert matches.all(), 'Match error: %s' % matches

if args.validate:
    data, edc_in, edc_out = read_test()
    print(show_match(match_data(data, edc_in, edc_out)))

if args.check:
    i = 0
    while True:
        check_read_data()
        i += 1
        print(i, end = '\r')
