#!/usr/bin/env python

import numpy

from registers import driver, regs

from exchange import do_exchange, print_header

DQ_WRITE_WIDTH = 64
EXCH_COUNT = 30



def main():
    status = regs.SYS.GDDR6.STATUS._get_fields()
    print(status)
    assert status.CK_OK and not status.CK_UNLOCK

    test_sequence = [0xFF, 0, 0, 0x57, 0, 0, 0xFF]
    test_sequence = [0xFF, 0, 1, 0, 0, 0xFF]
    test_sequence = [0xFF] + list(range(8)) + [0xFF]
    test_sequence = [0xFF, 0x00, 0xFF, 0] + 4 * [0x5C] + [0x00, 0xFF]
    test_sequence = 4 * [0]
#     test_sequence = [255]*64

    DQ_COUNT = len(test_sequence)
    dqa = numpy.empty((DQ_COUNT, DQ_WRITE_WIDTH), dtype = numpy.uint8)
    for n, t in enumerate(test_sequence):
        dqa[n, :] = t
#     dqa = []
    dqt = numpy.zeros(DQ_COUNT, dtype = numpy.bool)

#     dqa = numpy.zeros((4, DQ_WRITE_WIDTH), dtype = numpy.uint8)
#     dqt = [0, 1, 1, 0]
#     dqt = [1, 0, 0, 1]

#     data, edc_in, edc_out = do_exchange([], dqt, dqa, EXCH_COUNT)
    exchange = do_exchange([], dqt, dqa, EXCH_COUNT)
    print_header(show_edc_out = True)
    exchange.print(show_edc_out = True)


# driver.VERBOSE = True
main()
