#!/usr/bin/env python

assert False

import numpy
import time

from registers import driver, regs

sg = regs.SYS.GDDR6

sg.CONFIG._write_fields_rw(CK_RESET_N = 0, SG_RESET_N = 0)
time.sleep(0.1)
sg.CONFIG.CK_RESET_N = 1
print(sg.STATUS)

def write_ca(value = 0x3FF, cke_n = 1):
    sg.COMMAND._write_fields_wo(START_WRITE = 1)
    sg.CA._write_fields_wo(
        RISING = value, FALLING = value, CA3 = 0, CKE_N = cke_n, DQ_T = 1)
    sg.COMMAND._write_fields_wo(EXCHANGE = 1)


# Program SG1 for no CK termination
write_ca(value = 0b1111_01_10_10)
sg.CONFIG.SG_RESET_N = 1
# Program SG2 for CK termination
write_ca(value = 0b1111_10_10_10)
sg.CONFIG.SG_RESET_N = 3
# Hold for t_ATH = 10 ns
# Now pull CKE low and hold for t_INIT2 = 1 ms
write_ca(cke_n = 0)
time.sleep(0.002)

# Issue MRS command leaving CKE low
write_ca(value = 0b10_1111_0100, cke_n = 0)


def read_dq(count):
    sg.COMMAND._write_fields_wo(START_READ = 1)
    result = numpy.empty((count, 64//4), dtype = numpy.uint32)
    for i in range(count):
        for n in range(64//4):
            result[i, n] = sg.DQ._value
    return result.view('uint8')

def print_dq(data):
    print('   ', end = '')
    for n in range(64):
        print(' %2d' % n, end = '')
    print()
    for n, d in enumerate(data):
        print('%2d:' % n, end = '')
        for x in d:
            print(' %02X' % x, end = '')
        print()


def write_cat(value1, value2):
    sg.COMMAND._write_fields_wo(START_WRITE = 1)
    sg.CA._write_fields_wo(
        RISING = value1, FALLING = value2, CA3 = 0, CKE_N = 1, DQ_T = 1)
    for n in range(20):
        sg.CA._write_fields_wo(
            RISING = 0x3FF, FALLING = 0x3FF, CA3 = 0, CKE_N = 0, DQ_T = 1)
    sg.COMMAND._write_fields_wo(EXCHANGE = 1)
    return read_dq(21)


# Write test pattern
# test = write_cat(0x3FF, 0x3FF)
test = write_cat(0, 0)
print_dq(test)
