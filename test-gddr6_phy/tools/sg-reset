#!/usr/bin/env python

import time
import numpy

from registers import driver, sg


# Configuration settings for SG1 and SG2
SG1_CA = 0b111_1_00_00_00       # SG1: all inputs high impedance
SG2_CA = 0b111_1_11_11_11       # SG2: CK @ 60 Ohm, CA @ 120 Ohm

MRS_PREFIX = 0b10_0000_0000

def MRS(m, op):
    rising  = MRS_PREFIX | (m << 4) | (op & 0xF)
    falling = MRS_PREFIX | (op >> 4)
    return (rising, falling)

NOP = (0b11_11111111, 0b11_11111111)
VENDOR_ID1 = MRS(3, 0b00_00_01_000_000)
VENDOR_ID2 = MRS(3, 0b00_00_10_000_000)

CA_TRAINING_RISING = MRS(15, 0b1111_0100_0100)


class Exchange:
    def __init__(self):
        sg.COMMAND._write_fields_wo(START_WRITE = 1)
        self.count = 0

    def command(self, command, cke_n = 0):
        sg.CA._write_fields_wo(
            RISING = command[0], FALLING = command[1],
            CA3 = 0, CKE_N = cke_n, OUTPUT_ENABLE = 0)
        self.count += 1

    def delay(self, delay):
        for n in range(delay):
            self.command(NOP)

    def run(self):
        sg.COMMAND._write_fields_wo(EXCHANGE = 1, START_READ = 1)
        driver.VERBOSE = False

        data = numpy.empty((self.count, 16), dtype = numpy.uint32)
        for i in range(self.count):
            for j in range(16):
                data[i, j] = sg.DQ._value
            sg.COMMAND._write_fields_wo(STEP_READ = 1)

        return data.view('uint8')

def print_data(data):
    print('    ', ' '.join('%2d' % n for n in range(64)))
    for n, dq in enumerate(data):
        print('%2d:' % n, '[' + ' '.join(['%02X' % a for a in dq]) + ']')


# Set CA to requested value
def set_ca(value):
    sg.COMMAND._write_fields_wo(START_WRITE = 1)
    sg.CA._write_fields_wo(
        RISING = value, FALLING = value,
        CA3 = 0, CKE_N = 0, OUTPUT_ENABLE = 0)
    sg.COMMAND._write_fields_wo(EXCHANGE = 1)

def write_ca(command):
    sg.CA._write_fields_wo(
        RISING = command[0], FALLING = command[1],
        CA3 = 0, CKE_N = 0, OUTPUT_ENABLE = 0)


assert sg.STATUS.CK_OK, 'CK is not running and enabled'

if sg.CONFIG.SG_RESET_N != 3:
    print('Resetting SG ram')
    sg.CONFIG.SG_RESET_N = 0
    time.sleep(0.1)


# Configure memories and bring out of reset

driver.VERBOSE = True

time.sleep(0.01)
set_ca(SG1_CA)
sg.CONFIG.SG_RESET_N = 1

time.sleep(0.01)
set_ca(SG2_CA)
sg.CONFIG.SG_RESET_N = 3

# Now allow EDC_T to be driven by memory
sg.CONFIG.EDC_T = 1

# Next let's optimistially try for a vendor ID command
# exchange = Exchange()
# exchange.command(NOP)
# exchange.command(VENDOR_ID1)
# exchange.command(VENDOR_ID1)
# exchange.command(VENDOR_ID1)
# exchange.delay(8)
# exchange.command(VENDOR_ID2)
# exchange.delay(16)
# data = exchange.run()

exchange = Exchange()
exchange.command(CA_TRAINING_RISING)
exchange.command(CA_TRAINING_RISING)
exchange.delay(12)
exchange.command((0x2AA, 0x155), 3)
exchange.delay(12)
# exchange.command((0x155, 0x2AA), 3)
# exchange.delay(20)
data = exchange.run()

print_data(data)

# Finally leave SG in reset
sg.CONFIG.SG_RESET_N = 0
