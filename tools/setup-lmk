#!/usr/bin/env python

import sys
import os
import time
import argparse

import bind_ifc_1412

from ifc_lib import lmk04616
from ifc_lib.lmk04616 import setup_acq_lmk
from fpga_lib.devices import LMK04616


class AddOutputName(argparse.Action):
    def __call__(self, parser, namespace, value, option):
        names = value.split(',')
        for name in names:
            if name not in setup_acq_lmk.OutputNames:
                parser.error('Name %s is not a valid output name' % name)
        getattr(namespace, self.dest).extend(value.split(','))


def parse_args():
    parser = argparse.ArgumentParser(
        description = 'Configure IFC LMK for system or acquisition clocks')
    parser.add_argument(
        '-a', '--addr', default = 0,
        help = 'Set physical address of card.  If not specified then card 0')
    parser.add_argument(
        '-v', '--verbose', action = 'store_true',
        help = 'Report status on completion')
    parser.add_argument(
        '-t', '--test', action = 'store_true',
        help = 'Test mode, do not actually modify hardware')

    subparsers = parser.add_subparsers(
        dest = 'select',
        help = '''\
Select SYS or ACQ LMK to configure.
Use -h after selection for target specific help
''')

    sys_parser = subparsers.add_parser('sys',
        description = 'SYS clocks for GDDR6 and reference clocks')
    sys_parser.add_argument(
        '-f', '--force', action = 'store_true',
        help = 'Override SG check for SYS LMK')
    sys_parser.add_argument(
        '-o', '--overclock', action = 'store_true',
        help = 'Enable 300MHz overclock of SGRAM')
    sys_parser.add_argument(
        '-r', '--force_refclk', action = 'store_true',
        help = 'Force refclk outputs when overlock enabled')
    sys_parser.add_argument(
        '-d', '--refclk_div', default = 16, type = int,
        help = 'Set reference clock divisor.  Should normally be left unset.')

    acq_parser = subparsers.add_parser('acq',
        description = 'ACQ clocks for data acquisition clocks')
    acq_parser.add_argument(
        '-s', '--source', default = 'ssmc',
        choices = setup_acq_lmk.Sources.keys(),
        help = 'Select source of reference clock')
    acq_parser.add_argument(
        '-x', '--vcxo', action = 'store_true',
        help = 'Enable VCXO input')
    acq_parser.add_argument(
        '-o', '--output_names', default = [], action = AddOutputName,
        help = 'Enumerate LMK outputs to enable.  Options are: %s' %
            ', '.join(setup_acq_lmk.OutputNames))

    args = parser.parse_args()
    if not args.select:
        parser.error('Must specify sys or acq to configure')
    return args


def get_sys_args(args):
    return dict(
        overclock = args.overclock, force_refclk = args.force_refclk,
        refclk_div = args.refclk_div)

def get_acq_args(args):
    if not args.output_names:
        args.output_names = setup_acq_lmk.DefaultOutputs
    return dict(source = args.source, vcxo = args.vcxo)

def report_sys_status(lmk):
    print('SYS LMK Locked' if lmk.PLL2_LCK_DET else 'Unlocked')

def report_acq_status(lmk):
    print(
        'VCXO', 'locked' if lmk.PLL1_LCK_DET else 'unlocked', ',',
        'VCO',  'locked' if lmk.PLL2_LCK_DET else 'unlocked')

_setup_command = {
    'sys' : (get_sys_args, lmk04616.create_sys_config, report_sys_status),
    'acq' : (get_acq_args, lmk04616.create_acq_config, report_acq_status),
}


def check_sg_active(sg, args):
    if sg.CONFIG.ENABLE_CONTROL:
        # The memory controller is active and we're about to reconfigure the
        # SYS LMK.  Try not to do this by accident!
        if args.force:
            # Before messing with the LMK ensure that CK and SG are in reset
            # and the controller isn't actually running
            print('Resetting SGRAM first', file = sys.stderr)
            sg.CONFIG._write_fields_rw(
                CK_RESET_N = 0, SG_RESET_N = 0,
                ENABLE_CONTROL = 0, ENABLE_REFRESH = 0, ENABLE_AXI = 0)
        else:
            print('SGRAM is active, use --force to override', file = sys.stderr)
            sys.exit(1)


def main():
    args = parse_args()

    # In test mode use a dummy configuration, otherwise open the hardware
    if args.test:
        sg = None
        lmk = None
    else:
        top, sg = bind_ifc_1412.open(args.addr)
        lmk = lmk04616.RawLMK(top.LMK04616, args.select)

    # Check we don't accidentially reset the SGRAM!
    if args.select == 'sys' and sg:
        check_sg_active(sg, args)

    # Dispatch the appropriate setup
    get_args, create_config, report = _setup_command[args.select]
    config = create_config(**get_args(args))
    lmk = lmk04616.setup_lmk(lmk, config)

    if not args.test and args.verbose:
        report(lmk)

main()
