#!/usr/bin/env python

import sys
import os
import time
import argparse

import bind_ifc_1412

from ifc_lib import lmk04616
from fpga_lib.devices import LMK04616


def parse_args():
    parser = argparse.ArgumentParser(
        description = 'Configure IFC LMK for system or acquisition clocks')
    parser.add_argument(
        '-a', dest = 'addr', default = 0,
        help = 'Set physical address of card.  If not specified then card 0')
    parser.add_argument(
        '-f', dest = 'force', action = 'store_true',
        help = 'Override SG check for SYS LMK')
    parser.add_argument(
        'select', default = 'sys', choices = ['sys', 'acq'], nargs = '?',
        help = 'Select SYS or ACQ LMK to configure')

    return parser.parse_args()



_setup_command = {
    'sys' : lmk04616.setup_sys_lmk,
    'acq' : lmk04616.setup_acq_lmk,
}


def setup_lmk(lmk_reg, select):
    setup = _setup_command[select]
    raw_lmk = lmk04616.RawLMK(lmk_reg, select)
    lmk = setup(raw_lmk)
    return lmk


def report_status(top, lmk):
    print('SYS LMK Locked' if lmk.PLL2_LCK_DET else 'Unlocked')



def main():
    args = parse_args()

    top, sg = bind_ifc_1412.open(args.addr)

    if sg and args.select == 'sys' and sg.CONFIG.ENABLE_CONTROL:
        # The memory controller is active and we're about to reconfigure the SYS
        # LMK.  Try not to do this by accident!
        if args.force:
            # Before messing with the LMK ensure that CK and SG are in reset and
            # the controller isn't actually running
            print('Resetting SGRAM first', file = sys.stderr)
            sg.CONFIG._write_fields_rw(
                CK_RESET_N = 0, SG_RESET_N = 0,
                ENABLE_CONTROL = 0, ENABLE_REFRESH = 0, ENABLE_AXI = 0)
        else:
            print('SGRAM is active', file = sys.stderr)
            sys.exit(1)

    lmk = setup_lmk(top.LMK04616, args.select)

    # Wait for lock before enabling ethernet and reporting status
    time.sleep(0.1)
    report_status(top, lmk)


main()
