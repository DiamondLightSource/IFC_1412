#!/usr/bin/env python

# Read Vendor IDs and temperatures

import argparse

import registers

from ifc_lib.gddr6_lib.commands import *
from ifc_lib.gddr6_lib import exchange
from ifc_lib.gddr6_lib.display import *
from ifc_lib.gddr6_lib import setup


parser = argparse.ArgumentParser(description = 'Read Vendor IDs etc')
parser.add_argument('-q', '--quiet', action = 'store_true')
args = parser.parse_args()

_, sg = registers.open()
setup.check_sg_ready(sg)


exchange = exchange._Exchange(sg)

# Read the Vendor ID registers
exchange.command(VENDOR_ID1)
exchange.delay(3)
exchange.command(VENDOR_ID2)
exchange.delay(3)
exchange.command(READ_TEMPS)
exchange.delay(3)
exchange.command(VENDOR_OFF)
exchange.delay(15)
data = exchange.run()

offset = 14
if not args.quiet:
    print_condensed_data(data, offset = offset)

ID1, id1_good = condense_data(data[offset + 3])
ID2, id2_good = condense_data(data[offset + 7])
temps, t_good = condense_data(data[offset + 11])

assert id1_good.all(), 'Bad ID1 reading'
assert (ID1[0] == ID1).all(), 'Inconsistent ID1: %s' % ID1
assert id2_good.all(), 'Bad ID2 reading'
assert (ID2[0] == ID2).all(), 'Inconsistent ID2: %s' % ID2
assert t_good.all(), 'Bad temperature reading'
assert (temps & 0xFF == temps >> 8).all(), \
    'Inconstent temperature readings: %s' % temps

print(
    'ID1: %04X, ID2: %04X,' % (ID1[0], ID2[0]),
    'Temperatures:', 2 * (temps & 0xFF) - 40, 'degrees')

# We expect ID1 = EB1F, ID2 = FFFC
assert ID1[0] == 0xEB1F and ID2[0] == 0xFFFC, 'Unexpected ID1 or ID2'
