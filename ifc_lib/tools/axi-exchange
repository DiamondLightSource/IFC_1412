#!/usr/bin/env python

import sys
import argparse
import numpy

import registers

from ifc_lib.gddr6_lib.commands import *
from ifc_lib.gddr6_lib.exchange import send_command
from ifc_lib.gddr6_lib.decode import DecodeCA

top, sg = registers.open()
axi = top.AXI

def int0(x):
    return int(x, 0)

# Parses a list of numbers as an bit array
def parse_event_mask(argument):
    def parse_index(string):
        value = int0(string)
        if 0 <= value < 64:
            return value
        else:
            raise argparse.ArgumentTypeError('Invalid index %d' % string)

    result = 0
    for arg in argument.split(','):
        fields = arg.split('-', 1)
        if len(fields) == 1:
            result |= 1 << parse_index(fields[0])
        else:
            low, high = map(parse_index, fields)
            for n in range(low, high + 1):
                result |= 1 << n

    return result


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-v', '--verbose',
        default = False, action = 'store_true')
    parser.add_argument('-a', '--address', default = 0, type = int0)
    parser.add_argument('-w', '--write', type = int0)
    parser.add_argument('-c', '--capture',
        default = False, action = 'store_true')
    parser.add_argument('-r', '--read', type = int0)
    parser.add_argument('-k', '--constant', type = int0)
    parser.add_argument('-n', '--enable_dbi',
        default = True, action = 'store_false')
    parser.add_argument('-d', '--capture_dbi',
        default = False, action = 'store_true')
    parser.add_argument('-m', '--byte_mask',
        default = 2**64-1, type = parse_event_mask)
    parser.add_argument('-q', '--quiet',
        default = False, action = 'store_true')
    return parser.parse_args()


def get_axi_stats():
    return numpy.array(
        [axi.STATS[i]._value for i in range(11)], dtype = numpy.uint32)

def show_axi_stats(old_stats = None):
    names = [
        'write_frame_error',
        'write_crc_error',
        'write_last_error',
        'write_address',
        'write_transfer',
        'write_data_beat',
        'read_frame_error',
        'read_crc_error',
        'read_address',
        'read_transfer',
        'read_data_beat',
    ]
    stats = get_axi_stats()
    if old_stats is not None:
        stats -= old_stats
    return [(names[i], stats[i]) for i in range(11) if stats[i] > 0]


def read_data():
    data = numpy.empty(16, dtype = numpy.uint32)
    for i in range(16):
        data[i] = sg.DQ._value
    return data.view('uint8')

def read_edc():
    edc = numpy.empty(2, dtype = numpy.uint32)
    for i in range(2):
        edc[i] = sg.EDC._value
    return edc.view('uint8')

def read_dbi():
    dbi = numpy.empty(2, dtype = numpy.uint32)
    for i in range(2):
        dbi[i] = sg.DBI._value
    return dbi.view('uint8')

def show_bits(bytes):
    return ' '.join(f'{byte:08b}' for byte in bytes)


def write_axi_buffer(data, byte_mask):
    data = numpy.require(data, dtype = numpy.uint8).view(numpy.uint32)
    rows, columns = data.shape
    axi.COMMAND.START_WRITE = 1
#     axi.SETUP.BYTE_MASK = byte_mask
    for row in data:
        for n, word in enumerate(row):
            axi.SETUP.BYTE_MASK = (byte_mask >> (4 * n)) & 0xF
            axi.DATA._value = word
        axi.COMMAND.STEP_WRITE = 1

def read_axi_buffer(count):
    data = numpy.empty((count, 16), dtype = numpy.uint32)
    axi.COMMAND.START_READ = 1
    for i in range(count):
        for j in range(16):
            data[i, j] = axi.DATA._value
        axi.COMMAND.STEP_READ = 1
    return data.view(numpy.uint8)

def show_bytes(data):
    return ' '.join('{:02X}'.format(byte) for byte in data)

def show_channels(data):
    data = data.reshape((4, 16))
    return '  '.join(show_bytes(ch) for ch in data)


def get_ca_commands(verbose, count = 64):
    decode = DecodeCA()
    sg.COMMAND.START_READ = 1
    for i in range(count):
        ca = sg.CA._get_fields()
        data = read_data()
        edc = read_edc()
        dbi = read_dbi()
        sg.COMMAND.STEP_READ = 1
        decode.decode(ca)
        if verbose:
            if (data != 0xFF).any() or (edc != 0xAA).any():
                print(i, '',
                    show_channels(data), '-',
                    show_bytes(edc), '', show_bytes(dbi))

def enable_controller(enable_dbi, capture_dbi):
    sg.CONFIG._write_fields_rw(
        ENABLE_CONTROL = 1,
        ENABLE_REFRESH = 1,
        ENABLE_AXI = 1,
        DBI_TRAINING = 0,
        ENABLE_DBI = enable_dbi,
        CAPTURE_EDC_OUT = int(not capture_dbi))

def do_axi_exchange(do_write, do_read, address = 0, read_count = 1):
    old_stats = get_axi_stats()
    axi.REQUEST._write_fields_rw(ADDRESS = address, LENGTH = read_count)
    axi.COMMAND._write_fields_wo(
        CAPTURE = 1, START_AXI_WRITE = do_write, START_AXI_READ = do_read)
    get_ca_commands(args.verbose)
    for name, value in show_axi_stats(old_stats):
        print(f'{name:20s}{value}')


def show_fields(register):
    values = register._get_fields()
    return ', '.join(
        '{:s} = {:d}'.format(name, getattr(values, name))
        for name in register._field_names)


args = parse_args()

enable_controller(args.enable_dbi, args.capture_dbi)
sg.CONFIG.EDC_SELECT = 0

if args.write:
    if args.constant is None:
        data_out = numpy.arange(
            args.write * 64, dtype = numpy.uint8).reshape((-1, 64))
    else:
        data_out = numpy.empty((args.write, 64), dtype = numpy.uint8)
        data_out[:, :] = args.constant
    write_axi_buffer(data_out, args.byte_mask)
    do_axi_exchange(1, 0, args.address)

if args.read:
    do_axi_exchange(0, 1, args.address, args.read - 1)
    for n, row in enumerate(read_axi_buffer(args.read)):
        print('{:04X}:'.format(args.address + n), show_channels(row))

if args.capture:
    do_axi_exchange(0, 0)

if not args.quiet:
    print('AXI STATUS:', show_fields(axi.STATUS))
    print('SG STATUS:', show_fields(sg.STATUS))
    print('SG CONFIG:', show_fields(sg.CONFIG))
