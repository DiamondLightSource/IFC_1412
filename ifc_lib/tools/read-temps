#!/usr/bin/env python

import signal
import numpy
import time
import argparse
import sys

from ifc_lib.gddr6_lib import setup

import registers

def parse_args():
    parser = argparse.ArgumentParser(description = 'Read SGRAM temperatures')
    parser.add_argument(
        '-a', dest = 'addr', default = 0,
        help = 'Set physical address of card.  If not specified then card 0')
    parser.add_argument(
        '-t', dest = 'timestamp', default = False, action = 'store_true',
        help = 'Add timestamp to temperature readings')
    parser.add_argument(
        '-m', dest = 'mean_count', default = 1, type = int,
        help = 'Samples to average over')
    parser.add_argument(
        '-d', dest = 'delay', default = 0, type = float,
        help = 'Delay between readings')
    return parser.parse_args()


args = parse_args()

_, sg = registers.open(args.addr)
setup.check_ctrl_ready(sg)



def read_temp_array(count):
    temps_array = numpy.empty((count, 4))
    for i in range(count):
        temps = sg.TEMPS._get_fields()
        temps_array[i] = [temps.CH0, temps.CH1, temps.CH2, temps.CH3]
        time.sleep(1e-3)
    return 2 * temps_array.mean(axis = 0) - 40


ctrl_c_seen = False
def handler(sig, frame):
    global ctrl_c_seen
    if ctrl_c_seen:
        sys.exit(1)
    ctrl_c_seen = True
signal.signal(signal.SIGINT, handler)


def read_temps():
    while not ctrl_c_seen:
        temps = read_temp_array(args.mean_count)
        line = ' '.join('{:.1f}'.format(t) for t in temps)
        if args.timestamp:
            line = '{:f} {:s}'.format(time.time(), line)
        print(line)
        if args.delay:
            time.sleep(args.delay)
        # If single shot reading (no delay, no averaging) return immediately
        if not args.delay and args.mean_count <= 1:
            break

read_temps()
