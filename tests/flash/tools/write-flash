#!/usr/bin/env python

import sys
import os
import argparse

import flash_lib


def parse_args():
    parser = argparse.ArgumentParser(description = 'Write to flash memory')
    flash_lib.add_common_args(parser)
    parser.add_argument('input', help = 'File to write to flash')
    return parser.parse_args()


def fail(message):
    print(message, file = sys.stderr)
    sys.exit(1)


SECTOR_SIZE = 0x40000
PAGE_SIZE = 512


class Progress:
    SYMBOL = '|/-\\'

    def __init__(self, file):
        self.size = os.path.getsize(file)
        self.state = 0

    def report(self, address, end = '\r'):
        progress = 100 * address / self.size
        symbol = self.SYMBOL[self.state]
        self.state = (self.state + 1) % len(self.SYMBOL)
        print('{} {:4.1f}% {}'.format(symbol, progress, address), end = end)

    def done(self):
        self.report(self.size, '\n')


def wait_while_busy(e):
    # Wait for programming to complete
    while True:
        status = e.RDSR1()
        if not status & 1:
            break
    # Report any detected error condition
    if status & 0x60:
        e.WRDI()
        fail('Erase or write error: %02X' % status)


def erase_sector(e, address):
    e.WREN()
    e.SE(address)
    wait_while_busy(e)


def program_sector(e, address, block):
    for base in range(0, len(block), 512):
        e.WREN()
        e.PP(address + base, block[base:base+512])
        wait_while_busy(e)


def write_flash(e, input, progress):
    address = 0
    while True:
        block = input.read(SECTOR_SIZE)
        if not block:
            break
        progress.report(address)
        erase_sector(e, address)
        program_sector(e, address, block)
        address += SECTOR_SIZE


def main():
    args = parse_args()
    e = flash_lib.open_with_args(args)

    progress = Progress(args.input)
    with open(args.input, 'rb') as input:
        write_flash(e, input, progress)
    progress.done()


main()
