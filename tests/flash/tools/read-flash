#!/usr/bin/env python

import sys
import argparse

import flash_lib


def count_type(arg):
    scale = 1
    if arg[-1] in 'KM':
        scale = { 'K' : 1024, 'M' : 1024 * 1024 }[arg[-1]]
        arg = arg[:-1]
    return int(arg) * scale

def parse_args():
    parser = argparse.ArgumentParser(description = 'Read from flash memory')
    flash_lib.add_common_args(parser)
    parser.add_argument(
        'count', type = count_type,
        help = 'Number of bytes to read from memory')
    parser.add_argument('output', help = 'Output file')
    return parser.parse_args()


def read_flash(e, count, output):
    block_size = 512
    address = 0

    while count > 0:
        read_size = min(block_size, count)
        data = e.FAST_READ(address, read_size)
        output.write(data)

        count -= read_size
        address += read_size


def main():
    args = parse_args()
    e = flash_lib.open_with_args(args)

    with open(args.output, 'wb') as output:
        read_flash(e, args.count, output)

main()
