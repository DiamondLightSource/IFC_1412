#!/usr/bin/env python

import time
import sys
import argparse

import ifc_lib
from fpga_lib.driver import driver

import bind_lmk

parser = argparse.ArgumentParser(description = 'Read/write raw registers')
parser.add_argument(
    '-a', dest = 'addr', default = 0,
    help = 'Set physical address of card.  If not specified then card 1')
parser.add_argument(
    '-c', dest = 'concise', action = 'store_true',
    help = 'Concise formatting of clocks')
parser.add_argument(
    'count', default = 1, nargs = '?', type = int,
    help = 'Number of samples to show')
args = parser.parse_args()


top = bind_lmk.open(args.addr)

# See test clock input assignments in top.vhd for the clock assignments
freq_names = [
    "SG12 CK",
    "SG1_WCK",
    "SG2_WCK",
    "ACQCLK",
    "TCLKB",
]

def print_freqs(concise):
    while not top.EVENTS.COUNT_UPDATE:
        time.sleep(0.01)
    if concise:
        for freq_reg in top.CLOCK_FREQ:
            print(10 * freq_reg._value, end = '  ')
    else:
        for name, freq_reg in zip(freq_names, top.CLOCK_FREQ):
            print('{:8}: {:9.4f} MHz'.format(
                name, 1e-6 * 10.0 * freq_reg._value))
    print()

count = args.count
try:
    if count > 0:
        for n in range(count):
            print_freqs(args.concise)
    else:
        while True:
            print_freqs(args.concise)
except KeyboardInterrupt:
    pass
