#!/usr/bin/env python

import time
import sys
import argparse

import bind_ifc_1412


parser = argparse.ArgumentParser(description = 'Read/write raw registers')
parser.add_argument(
    '-a', dest = 'addr', default = 0,
    help = 'Set physical address of card.  If not specified then card 1')
parser.add_argument(
    '-c', dest = 'concise', action = 'store_true',
    help = 'Concise formatting of clocks')
parser.add_argument(
    'count', default = 1, nargs = '?', type = int,
    help = 'Number of samples to show')
args = parser.parse_args()


top, _ = bind_ifc_1412.open(args.addr)

# See test clock input assignments in top.vhd for the clock assignments
freq_names = [
    "SG12 CK",
    "SG1_WCK",
    "SG2_WCK",
    "ACQCLK",
    "TCLKB",
    "FMC1_CLK(0)",
    "FMC1_CLK(1)",
    "FMC1_CLK(2)",
    "FMC1_CLK(3)",
    "FMC2_CLK(0)",
    "FMC2_CLK(1)",
    "FMC2_CLK(2)",
    "FMC2_CLK(3)",
    "E10G_CLK1",
    "E10G_CLK2",
    "E10G_CLK3",
    "MGT126_CLK0",
    "MGT227_REFCLK",
    "MGT229_REFCLK",
    "MGT230_REFCLK",
    "MGT127_REFCLK",
    "MGT232_REFCLK",
    "RTM_GTP_CLK0_IN",
    "RTM_GTP_CLK3_IN",
    "FMC1_GBTCLK(0)",
    "FMC1_GBTCLK(1)",
    "FMC1_GBTCLK(2)",
    "FMC1_GBTCLK(3)",
    "FMC2_GBTCLK(0)",
    "FMC2_GBTCLK(1)",
    "FMC2_GBTCLK(2)",
    "FMC2_GBTCLK(3)",
]

def print_freqs(concise):
    while not top.EVENTS.COUNT_UPDATE:
        time.sleep(0.01)
    if concise:
        for freq_reg in top.CLOCK_FREQ:
            print(10 * freq_reg._value, end = '  ')
    else:
        for name, freq_reg in zip(freq_names, top.CLOCK_FREQ):
            print('{:16}: {:9.4f} MHz'.format(
                name, 1e-6 * 10.0 * freq_reg._value))
    print()

count = args.count
try:
    if count > 0:
        for n in range(count):
            print_freqs(args.concise)
    else:
        while True:
            print_freqs(args.concise)
except KeyboardInterrupt:
    pass
