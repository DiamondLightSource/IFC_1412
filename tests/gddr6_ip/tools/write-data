#!/usr/bin/env python

import sys
import os
import numpy
from numpy import random
import time
import argparse


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-b', '--buflen', default = 20, type = int)
    parser.add_argument('-c', '--count', default = 12, type = int)
    parser.add_argument('-r', '--repeat', action = 'store_true')
    parser.add_argument('-a', '--ascending', action = 'store_true')
    return parser.parse_args()

def dump_buffer(buffer):
    for n, b in enumerate(buffer):
        end = '\n' if n % 16 == 15 else ' '
        print(f'{b:02x}', end = end)

def generate_random(count):
    return random.bytes(count)

def generate_ascending(count):
    return numpy.arange(count, dtype = numpy.uint8).tobytes()


def format_count(count):
    if count < 1024:
        return f'{count}B'
    elif count < 1024**2:
        return f'{count/1024}KB'
    elif count < 1024**3:
        return f'{count/1024**2}MB'
    else:
        return f'{count/1024**3}MB'

def time_action(action, title, *args):

    start = time.time()
    count = action(*args)
    duration = time.time() - start

    rate = count / duration
    fc = format_count
    print(f'{title} {fc(count)} in {duration:.2f}s ({fc(rate)}/s)')

def do_write(dev, buflen, count, generate):
    tic = time.time()
    random.seed(0)
    os.lseek(dev, 0, os.SEEK_SET)
    for i in range(count):
        os.write(dev, generate(buflen))
    toc = time.time() - tic
    written = buflen * count
    rate = written / toc
    fc = format_count
    print(f'Wrote {fc(written)} in {toc:.2f}s ({fc(rate)}/s)')

def do_write(dev, buflen, count, generate):
    random.seed(0)
    os.lseek(dev, 0, os.SEEK_SET)
    for i in range(count):
        os.write(dev, generate(buflen))
    return buflen * count

def do_read(dev, buflen, count, generate):
    random.seed(0)
    os.lseek(dev, 0, os.SEEK_SET)
    for i in range(count):
        read_data = os.read(dev, buflen)
        expected = generate(buflen)
        if not (expected == read_data):
            print('Expected')
            dump_buffer(expected)
            print('Saw')
            dump_buffer(read_data)
            sys.exit(1)
    return buflen * count


def do_test(*args):
    time_action(do_write, 'Wrote', *args)
    time_action(do_read, 'Read', *args)

def main():
    args = parse_args()
    buflen = 2**args.buflen
    count = 2**args.count
    generate = generate_ascending if args.ascending else generate_random

    dev = os.open('/dev/ifc_1412-gddr6.0.sgram', os.O_RDWR)
    loop = True
    while loop:
        do_test(dev, buflen, count, generate)
        loop = args.repeat

main()
